import java.util.*;

class User {
    String name;
    List<String> preferredCompanies;
    List<String> availableTimeSlots;
    int rating;
    boolean acceptsGroupMeetings;

    User(String name, List<String> preferredCompanies, List<String> availableTimeSlots, int rating, boolean acceptsGroupMeetings) {
        this.name = name;
        this.preferredCompanies = preferredCompanies;
        this.availableTimeSlots = availableTimeSlots;
        this.rating = rating;
        this.acceptsGroupMeetings = acceptsGroupMeetings;
    }
}

class Company {
    String name;
    List<String> availableTimeSlots;
    boolean allowsGroupMeetings;

    Company(String name, List<String> availableTimeSlots, boolean allowsGroupMeetings) {
        this.name = name;
        this.availableTimeSlots = availableTimeSlots;
        this.allowsGroupMeetings = allowsGroupMeetings;
    }
}

class Meeting {
    User user;
    List<User> groupUsers;
    Company company;
    String timeSlot;
    String room;

    Meeting(User user, Company company, String timeSlot, String room) {
        this.user = user;
        this.company = company;
        this.timeSlot = timeSlot;
        this.room = room;
        this.groupUsers = null;
    }

    Meeting(List<User> groupUsers, Company company, String timeSlot, String room) {
        this.groupUsers = groupUsers;
        this.company = company;
        this.timeSlot = timeSlot;
        this.room = room;
    }
}

public class MeetingScheduler {

    public static List<List<Meeting>> findLongestMeetingStreak(List<User> users, List<Company> companies, List<String> rooms) {
        // Sort users by rating (descending) and organize preferences.
        users.sort((u1, u2) -> Integer.compare(u2.rating, u1.rating));

        // Generate prioritized user-company pairs.
        List<Pair<User, Company>> pairs = new ArrayList<>();
        for (User user : users) {
            for (String companyName : user.preferredCompanies) {
                for (Company company : companies) {
                    if (company.name.equals(companyName)) {
                        pairs.add(new Pair<>(user, company));
                        break;
                    }
                }
            }
        }

        // Track the best solutions (longest streaks).
        List<List<Meeting>> bestSolutions = new ArrayList<>();
        int longestStreak = 0;

        // Backtracking to explore all valid schedules.
        findLongestStreakHelper(pairs, users, companies, rooms, new ArrayList<>(), 0, new HashSet<>(), new HashSet<>(), bestSolutions, new int[]{longestStreak});

        return bestSolutions;
    }

    private static void findLongestStreakHelper(
            List<Pair<User, Company>> pairs,
            List<User> users,
            List<Company> companies,
            List<String> rooms,
            List<Meeting> currentSchedule,
            int currentIndex,
            Set<String> occupiedTimeSlots,
            Set<String> occupiedRooms,
            List<List<Meeting>> bestSolutions,
            int[] longestStreak) {

        if (currentIndex == pairs.size()) {
            int currentStreak = currentSchedule.size();
            if (currentStreak > longestStreak[0]) {
                bestSolutions.clear();
                bestSolutions.add(new ArrayList<>(currentSchedule));
                longestStreak[0] = currentStreak;
            } else if (currentStreak == longestStreak[0]) {
                bestSolutions.add(new ArrayList<>(currentSchedule));
            }
            return;
        }

        Pair<User, Company> pair = pairs.get(currentIndex);
        User user = pair.user;
        Company company = pair.company;

        // Try scheduling solo meeting.
        for (String timeSlot : user.availableTimeSlots) {
            if (company.availableTimeSlots.contains(timeSlot)) {
                for (String room : rooms) {
                    String roomTimeKey = timeSlot + ":" + room;
                    if (!occupiedTimeSlots.contains(timeSlot) && !occupiedRooms.contains(roomTimeKey)) {
                        // Schedule solo meeting.
                        Meeting meeting = new Meeting(user, company, timeSlot, room);
                        currentSchedule.add(meeting);
                        occupiedTimeSlots.add(timeSlot);
                        occupiedRooms.add(roomTimeKey);

                        findLongestStreakHelper(pairs, users, companies, rooms, currentSchedule, currentIndex + 1, occupiedTimeSlots, occupiedRooms, bestSolutions, longestStreak);

                        // Backtrack.
                        currentSchedule.remove(currentSchedule.size() - 1);
                        occupiedTimeSlots.remove(timeSlot);
                        occupiedRooms.remove(roomTimeKey);
                    }
                }
            }
        }

        // Try scheduling group meeting if both user and company allow.
        if (user.acceptsGroupMeetings && company.allowsGroupMeetings) {
            for (String timeSlot : user.availableTimeSlots) {
                if (company.availableTimeSlots.contains(timeSlot)) {
                    for (String room : rooms) {
                        String roomTimeKey = timeSlot + ":" + room;
                        if (!occupiedRooms.contains(roomTimeKey)) {
                            // Find other users available at this time slot.
                            List<User> groupUsers = new ArrayList<>();
                            for (User otherUser : users) {
                                if (!otherUser.equals(user) && otherUser.availableTimeSlots.contains(timeSlot) && otherUser.acceptsGroupMeetings) {
                                    groupUsers.add(otherUser);
                                }
                            }

                            if (!groupUsers.isEmpty()) {
                                // Schedule group meeting.
                                groupUsers.add(user);
                                Meeting meeting = new Meeting(groupUsers, company, timeSlot, room);
                                currentSchedule.add(meeting);
                                occupiedRooms.add(roomTimeKey);

                                findLongestStreakHelper(pairs, users, companies, rooms, currentSchedule, currentIndex + 1, occupiedTimeSlots, occupiedRooms, bestSolutions, longestStreak);

                                // Backtrack.
                                currentSchedule.remove(currentSchedule.size() - 1);
                                occupiedRooms.remove(roomTimeKey);
                            }
                        }
                    }
                }
            }
        }

        // Skip this pair and move to the next.
        findLongestStreakHelper(pairs, users, companies, rooms, currentSchedule, currentIndex + 1, occupiedTimeSlots, occupiedRooms, bestSolutions, longestStreak);
    }

    private static class Pair<U, C> {
        U user;
        C company;

        Pair(U user, C company) {
            this.user = user;
            this.company = company;
        }
    }

    public static void main(String[] args) {
        // Example data for testing.
        User user1 = new User("user1", Arrays.asList("company1", "company2"), Arrays.asList("9:00", "10:00"), 5, true);
        User user2 = new User("user2", Arrays.asList("company3", "company4"), Arrays.asList("9:00", "11:00"), 3, false);

        Company company1 = new Company("company1", Arrays.asList("9:00", "10:00"), true);
        Company company2 = new Company("company2", Arrays.asList("10:00", "11:00"), false);
        Company company3 = new Company("company3", Arrays.asList("9:00", "11:00"), true);

        List<String> rooms = Arrays.asList("RoomA", "RoomB");

        List<User> users = Arrays.asList(user1, user2);
        List<Company> companies = Arrays.asList(company1, company2, company3);

        List<List<Meeting>> results = findLongestMeetingStreak(users, companies, rooms);

        for (List<Meeting> solution : results) {
            System.out.println("Solution:");
            for (Meeting meeting : solution) {
                if (meeting.groupUsers == null) {
                    System.out.println("Solo Meeting: User=" + meeting.user.name + ", Company=" + meeting.company.name + ", Time=" + meeting.timeSlot + ", Room=" + meeting.room);
                } else {
                    System.out.print("Group Meeting: Users=");
                    for (User groupUser : meeting.groupUsers) {
                        System.out.print(groupUser.name + " ");
                    }
                    System.out.println(", Company=" + meeting.company.name + ", Time=" + meeting.timeSlot + ", Room=" + meeting.room);
                }
            }
        }
    }
}


I have a list of users and list of companies. Users want to meet with companies. 

User:
- has a list of companies that he wants to meet with (order of companies defines preferences of a meeting for the user - higher on the list are companies more important for a user)
- has a list of time slots that he is available 
- has a rating (higher rating defines that the user is more important than other users with lower rating)
- defines if he accepts to be part of grouping meetings (if he accepts then he can participate in a grouping meeting with other users, if he doesn't accept then can be only part of solo meetings where he and some company are the only participants)

Company:
- has a list of time slots that it is available 
- defines if it can be part of group meetings or only solo meetings

Meeting:
- has a user (or list of users) and a single company
- has a time slot
- has a room

Create list of pairs user and company ordered according to rules:
- users with higher ratings should be first
- companies within a single user higher on the users preference list should be first

So if I have user_1 with company_1 and company_2 and user_2 with company_3 and company_4 then list of pairs should be like that:
1. user_1 company_1
2. user_1 company_2
3. user_2 company_3
4. user_2 company_4

After creating this sorted list try to create meeting for each of this pair. Rules mentioned above applies to this meeting creation process. The goal is find a solution that has the longest streak of user to company pairs with a meeting. Going down the list of pairs at some point there won't be possible to create a meeting because there won't be available time slot or free room - when this happen then count the streak length and try to find other solution that beats this result. As a result I want only a solution with the longest streak - if there is more than one solution, each having equally long streak of meetings then return all of these longest solutions.

Write an algorithm in java.
