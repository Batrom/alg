import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;

public class Sol2 {

    private enum Type {
        ADD_TO_EXISTING_GROUP_MEETING,
        CREATE_GROUP_MEETING,
        CREATE_SOLO_MEETING,
        STOP,
    }

    private record Pair(int userId, int companyId) {
    }

    record Context(Set<Integer> usersThatAllowGroupMeetings,
                   Set<Integer> companiesThatAllowGroupMeetings,
                   Pair[] pairs) {
    }

    record Meetings(
            Context context,
            int index,
            Map<Integer, Meeting> currentMeetings,
            Map<Integer, int[]> userToAvailableTimeslots,
            Map<Integer, int[]> companyToAvailableTimeslots,
            Map<Integer, int[]> timeslotToAvailableRooms
    ) {

        Type decide(final int index) {
            final var pair = context.pairs()[index];
            userToAvailableTimeslots.get(pair.userId);

            if (context.usersThatAllowGroupMeetings.contains(pair.userId)) {
                final var meeting = currentMeetings.get(timeslot);
                if (meeting != null && meeting.allowGroups()) {
                    return Type.ADD_TO_EXISTING_GROUP_MEETING;
                }
                else {
                    return Type.CREATE_GROUP_MEETING;
                }
            } else {
                return Type.CREATE_SOLO_MEETING;
            }
        }

        Meetings tryToAddToCurrentGroupMeeting(final Pair pair, final int timeslot) {
            if (context.usersThatAllowGroupMeetings.contains(pair.userId)) {
                final var meeting = currentMeetings.get(timeslot);
                if (meeting != null && meeting.allowGroups()) {

                    final var updatedUserToAvailableTimeslot = removeKey(userToAvailableTimeslots, timeslot);
                    final var updatedMeeting = meeting.addUser(pair.userId);
                    final var updatedCurrentMeetings = update(currentMeetings, timeslot, updatedMeeting);

                    return new Meetings(context,
                            index + 1,
                            updatedCurrentMeetings,
                            updatedUserToAvailableTimeslot,
                            companyToAvailableTimeslots,
                            timeslotToAvailableRooms);
                }
            }
            return null;
        }

        Meetings tryToAddToCurrentGroupMeeting(final Pair pair, final int timeslot) {
            if (context.usersThatAllowGroupMeetings.contains(pair.userId)) {
                final var meeting = currentMeetings.get(timeslot);
                if (meeting != null && meeting.allowGroups()) {

                    final var updatedUserToAvailableTimeslot = removeKey(userToAvailableTimeslots, timeslot);
                    final var updatedMeeting = meeting.addUser(pair.userId);
                    final var updatedCurrentMeetings = update(currentMeetings, timeslot, updatedMeeting);

                    return new Meetings(context,
                            index + 1,
                            updatedCurrentMeetings,
                            updatedUserToAvailableTimeslot,
                            companyToAvailableTimeslots,
                            timeslotToAvailableRooms);
                }

                //tryToCreateNewGroupMeeting
            }
            // tryToCreateNewSoloMeeting
            return null;
        }

        Meetings tryToCreateNewGroupMeeting(final Pair pair, final int timeslot) {
            if (context.usersThatAllowGroupMeetings.contains(pair.userId)) {
                final var meeting = currentMeetings.get(timeslot);
                if (meeting != null && meeting.allowGroups()) {

                    final var updatedUserToAvailableTimeslot = removeKey(userToAvailableTimeslots, timeslot);
                    final var updatedMeeting = meeting.addUser(pair.userId);
                    final var updatedCurrentMeetings = update(currentMeetings, timeslot, updatedMeeting);

                    return new Meetings(context,
                            index + 1,
                            updatedCurrentMeetings,
                            updatedUserToAvailableTimeslot,
                            companyToAvailableTimeslots,
                            timeslotToAvailableRooms);
                }
            }
            return null;
        }


    }

    void match(final Pair[] pairs,
               final Map<Integer, Meeting> currentMeetings,
               final Map<Integer, int[]> userToAvailableTimeslot,
               final Map<Integer, int[]> companyToAvailableTimeslot,
               final Map<Integer, int[]> timeslotToAvailableRooms) {

        final var pair = pairs[0];
        final var userId = pair.userId;
        final var companyId = pair.companyId;

        final var updatedPairs = removeFirst(pairs);

        final var timeslotsOfUser = userToAvailableTimeslot.get(userId);
        final var timeslotsOfCompany = companyToAvailableTimeslot.get(companyId);

        for (final int timeslot : timeslotsOfUser) {
            if (usersThatAllowsGroupMeetings.contains(userId)) {
                // add to existing meeting
                final var meeting = currentMeetings.get(timeslot);
                if (meeting != null && meeting.allowGroups()) {
                    final var updatedUserToAvailableTimeslot = removeKey(userToAvailableTimeslot, timeslot);
                    final var updatedMeeting = meeting.addUser(userId);
                    final var updatedCurrentMeetings = update(currentMeetings, timeslot, updatedMeeting);

                }

                final var availableRooms = timeslotToAvailableRooms.get(timeslot);
                if (meeting.allowGroups() && availableRooms.length > 0) {

                }
                final var room = availableRooms[0];
                final var updatedTimeslotToAvailableRooms = update(timeslotToAvailableRooms, timeslot, removeFirst(availableRooms));

                // create a group meeting
                if (companiesThatAllowsGroupMeetings.contains(userId)) {

                }
            }

            // create a solo meeting


        }


    }

    record Meeting(int[] userIds, int companyId, int timeslot, int room, boolean allowGroups) {

        Meeting addUser(final int userId) {
            return new Meeting(add(userIds, userId), companyId, timeslot, room, allowGroups);
        }
    }

    record Timeslot(int id, int[] rooms) {
    }

    private static <K, V> Map<K, V> removeKey(final Map<K, V> origin, final K key) {
        final var map = new HashMap<>(origin);
        map.remove(key);
        return Map.copyOf(map);
    }

    private static <K, V> Map<K, V> update(final Map<K, V> origin, final K key, final V value) {
        final var map = new HashMap<>(origin);
        map.put(key, value);
        return Map.copyOf(map);
    }

    private static <T> T[] removeFirst(final T[] origin) {
        return Arrays.copyOfRange(origin, 1, origin.length);
    }

    private static <T> T[] add(final T[] origin, final T newValue) {
        final var newArray = Arrays.copyOf(origin, origin.length + 1);
        newArray[newArray.length - 1] = newValue;
        return newArray;
    }

}
